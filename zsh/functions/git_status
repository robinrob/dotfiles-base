local +r Start=$(date +'%s.%N')
IFS="
"

local +r TextMode
while getopts :t opt
do
  case $opt in
    t) TextMode="true"; shift ;;
  esac
done

function clean_file_line {
  local +r Line=$1

  print $(gsed 's/\s$//g' <<< $(gsed 's/\(.*\)//g' <<< $line))
}

function get_file_from_line {
  local +r Line=$1
  # local +r PossibleFile=$(remove_trailing_slash $(clean_file_line $Line | gawk '{print $NF}'))
  # local +r PossibleFile=$(remove_trailing_slash $(print $(clean_file_line $Line) | gawk '{print $NF}') | tr -d ' ')
  local +r PossibleFile=$(remove_trailing_slash $(ggrep -Poe '(?<=\s)([^\s]+)$' <<< $(clean_file_line $Line)))
  # print "PossibleFile: ${PossibleFile}" >> out.txt
 
  if $(is_file_or_dir $PossibleFile) || $(string_contains_word $Line 'deleted:')
  then
    print $PossibleFile
  else
    return 1
  fi
}

function is_staged {
  local +r Filename=$1

  if $(is_in_set $GitStage "$Filename")
  then
    return 0
  else
    return 1
  fi
}

function print_file_line {
  local +r RawLine=$1
  local +r Filename=$2
  local +r FileStatus=${FileStatuses[$Filename]}
  local +r FileNum=${FileNums[$Filename]}

  if $(is_in_set AM MM $FileStatus)
  then
    local +r Line="$(red $RawLine)"
  elif $(is_staged $Filename)
  then
    local +r Line="$(green $RawLine)"
  else
    local +r Line="$(red $RawLine)"
  fi

  print "$Line \($FileNum\)"
}

typeset -a GitStage
for line in "${(@f)"$(git diff --stat --cached | head -n -1 | ggrep -Poe '^([^\s]+)(?=\s)')"}"
do
  GitStage=($GitStage $line)
done

typeset -A FileStatuses
typeset -A FileNums

index=1
for line in $(git status -s)
do
  # local +r FileStatus=$(print $line | gawk '{print $1}')
  local +r FileStatus=$(ggrep -Poe '^([^\s]+)(?=\s)' <<< $line)
  local +r Filename=$(remove_trailing_slash $(gawk '{print $2}' <<< $line))
  # print "Filename: ${Filename}"

  FileStatuses[$Filename]=$FileStatus
  FileNums[$Filename]=$index

  index=$(( index + 1 ))
done

if (( $# > 0 ))
then
  local +r FilenameOrNum=$1
  if $(is_number $FilenameOrNum)
  then
    git_do_by_item_num 'git status' $FilenameOrNum
  else
    git status $*
  fi
else
  if [[ -n $TextMode ]]
  then
    local text=""
  fi

  # Read all lines from command output INCLUDING newlines
  for line in "${(@f)"$(git status)"}"
  do
    local +r PossibleFile=$(get_file_from_line $line)
    # print "PossibleFile: ${PossibleFile}"
    if [[ -n $PossibleFile ]]
    then
      if [[ -n $TextMode ]]
      then
        text="$text $(print_file_line $line $PossibleFile)\n"
      else
        print_file_line $line $PossibleFile
      fi

    else
      if [[ -n $TextMode ]]
      then
        text="$text $line\n"
      else
        print $line
      fi
    fi

  done
  print $text
fi
local +r End=$(date +'%s.%N')
print $(( End - Start))
