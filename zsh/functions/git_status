IFS="
"

function clean_file_line {
  local +r Line=$1

  print $(print $Line | gsed 's/\(.*\)//g')
}

function get_file_from_line {
  local +r Line=$1
  # local +r PossibleFile=$(remove_trailing_slash $(clean_file_line $Line | gawk '{print $NF}'))
  local +r PossibleFile=$(remove_trailing_slash $(print $(clean_file_line $Line) | gawk '{print $NF}') | tr -d ' ')

  if $(is_file_or_dir $PossibleFile) || $(string_contains $Line 'deleted:')
  then
    print $PossibleFile
  else
    return 1
  fi
}

function is_staged {
  local +r Filename=$1

  if $(string_contains $GitStage "$Filename")
  then
    return 0
  else
    return 1
  fi
}

function print_file_line {
  local +r RawLine=$1
  local +r Filename=$2
  local +r FileStatus=${FileStatuses[$Filename]}
  local +r FileNum=${FileNums[$Filename]}

  if $(is_in_set AM MM $FileStatus)
  then
    local +r Line="$(red $RawLine)"
  elif $(is_staged $Filename)
  then
    local +r Line="$(green $RawLine)"
  else
    local +r Line="$(red $RawLine)"
  fi

  print "$Line $(blue $FileNum)"
}

local +r GitStage=$(git diff --stat --cached | gawk '{print $1}')
typeset -A FileStatuses
typeset -A FileNums

index=1
for line in $(git status -s)
do
  local +r FileStatus=$(print $line | gawk '{print $1}')
  local +r Filename=$(remove_trailing_slash $(print $line | gawk '{print $2}'))

  FileStatuses[$Filename]=$FileStatus
  FileNums[$Filename]=$index

  index=$(( index + 1 ))
done

if (( $# > 0 ))
then
  local +r FilenameOrNum=$1
  if $(is_number $FilenameOrNum)
  then
    git_do_by_item_num 'git status' $FilenameOrNum
  else
    git status $*
  fi
else
  # local text=""

  # Read all lines from command output INCLUDING newlines
  for line in "${(@f)"$(git status)"}"
  do
    local +r PossibleFile=$(get_file_from_line $line)
    # print "PossibleFile: ${PossibleFile}"
    if [[ -n $PossibleFile ]]
    then
      print_file_line $line $PossibleFile
      # text="$text $(print_file_line $line)\n"

    else
      print $line
      # text="$text $line\n"
    fi
  done
fi
