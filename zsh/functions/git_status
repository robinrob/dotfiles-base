local +r Start=$(date +'%s.%N')
IFS="
"

local +r TextMode
while getopts :t opt
do
  case $opt in
    t) TextMode="true"; shift ;;
  esac
done

function clean_file_line {
  local +r Line=$1

  print $(gsed 's/\s$//g' <<< $(gsed 's/\(.*\)//g' <<< $line))
}

local +r -a GitStage
for line in "${(@f)"$(git diff --raw --cached | gawk '{print $NF}')"}"
do
  GitStage=($GitStage $line)
done

typeset -A FileStatuses
typeset -A FileNums

index=1
for line in $(git status -s)
do
  # local +r FileStatus=$(print $line | gawk '{print $1}')
  local +r FileStatus=$(ggrep -Poe '^([^\s]+)(?=\s)' <<< $line)
  local +r Filename=$(remove_trailing_slash $(gawk '{print $2}' <<< $line))
  # print "Filename: ${Filename}"

  FileStatuses[$Filename]=$FileStatus
  FileNums[$Filename]=$index

  index=$(( index + 1 ))
done

if (( $# > 0 ))
then
  local +r FilenameOrNum=$1
  if $(is_number $FilenameOrNum)
  then
    git_do_by_item_num 'git status' $FilenameOrNum
  else
    git status $*
  fi
else
  if [[ -n $TextMode ]]
  then
    local text=""
  fi

  # Read all lines from command output INCLUDING newlines
  for line in "${(@f)"$(git status)"}"
  do
    # local +r PossibleFile=$(remove_trailing_slash $(clean_file_line $Line | gawk '{print $NF}'))
    # local +r PossibleFile=$(remove_trailing_slash $(print $(clean_file_line $ggLine) | gawk '{print $NF}') | tr -d ' ')
    local PossibleFile=$(remove_trailing_slash $(ggrep -Poe '(?<=\s)([^\s]+)$' <<< $(clean_file_line $line)))

    # print "PossibleFile: ${PossibleFile}" >> out.txt
    # print "PossibleFile: ${PossibleFile}"
    if $(is_file_or_dir $PossibleFile) || $(string_contains_word $line 'deleted:')
    then

      local +r RawLine=$line
      local +r Filename=$PossibleFile
      local +r FileStatus=${FileStatuses[$Filename]}
      local +r FileNum=${FileNums[$Filename]}

      if $(is_in_set AM MM $FileStatus)
      then
        local +r Line="$(red $RawLine)"
      elif $(is_in_set $GitStage "$Filename")
      then
        local +r Line="$(green $RawLine)"
      else
        local +r Line="$(red $RawLine)"
      fi

      local +r FileLine="$Line \($FileNum\)"


      if [[ -n $TextMode ]]
      then
        text="$text $FileLine\n"
      else
        print "$FileLine"
      fi

    else
      if [[ -n $TextMode ]]
      then
        text="$text $line\n"
      else
        print $line
      fi
    fi

  done

  if [[ -n $TextMode ]]
  then
    print $text
  fi
fi
local +r End=$(date +'%s.%N')
# print $(( End - Start))
