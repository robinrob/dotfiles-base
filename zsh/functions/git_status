start=$(date +'%s.%N')
IFS="

"

local +r TextMode
while getopts :t opt
do
  case $opt in
    t) TextMode="true"; shift ;;
  esac
done

function get_file_from_line {
  local +r Line=$1
  # local +r PossibleFile=$(remove_trailing_slash $(clean_file_line $Line | gawk '{print $NF}'))
  # remove any forward slashes
  local +r CleanLine=$(gsed 's/\(.*\)//g' <<< "$Line")
  local +r PossibleFile=$(remove_trailing_slash "${${(z)Line}[-1]}")

  if $(is_file_or_dir $PossibleFile) || $(string_contains $Line 'deleted:')
  then
    print $PossibleFile
  else
    return 1
  fi
}

function is_staged {
  local +r Filename=$1

  case a in
    $GitStage) return 0;;
    *) return 1;;
  esac
  
  # if $(string_contains $GitStage "$Filename")
  # then
  #   return 0
  # else
  #   return 1
  # fi
}

function print_file_line {
  local +r RawLine=$1
  local +r Filename=$2
  local +r FileStatus=${FileStatuses[$Filename]}
  local +r FileNum=${FileNums[$Filename]}

  if $(is_in_set AM MM $FileStatus)
  then
    local +r Line="$(red $RawLine)"
  elif $(is_staged $Filename)
  then
    local +r Line="$(green $RawLine)"
  else
    local +r Line="$(red $RawLine)"
  fi

  print "$Line $(blue \($FileNum\))"
}

local +r GitStage=$(git diff --stat --cached | gawk '{print $1}')
typeset -A FileStatuses
typeset -A FileNums

index=1
for line in $(git status --short)
do
  local +r FileStatus=${${(z)line}[1]}
  local +r Filename=$(remove_trailing_slash ${${(z)line}[2]})

  FileStatuses[$Filename]=$FileStatus
  FileNums[$Filename]=$index

  index=$(( index + 1 ))
done

if (( $# > 0 ))
then
  local +r FilenameOrNum=$1
  if $(is_number $FilenameOrNum)
  then
    git_do_by_item_num 'git status' $FilenameOrNum
  else
    git status $*
  fi
else
  local text=""

  # Read all lines from command output INCLUDING newlines
  for line in "${(@f)"$(git status)"}"
  do
    local +r PossibleFile=$(get_file_from_line $line)
    # print "PossibleFile: ${PossibleFile}"
    if [[ -n $PossibleFile ]]
    then
      local +r RawLine=$line
      local +r Filename=$PossibleFile
      local +r FileStatus=${FileStatuses[$Filename]}
      local +r FileNum=${FileNums[$Filename]}

      if $(is_in_set AM MM $FileStatus)
      then
        local +r Line="$(red $RawLine)"
      elif $(is_staged $Filename)
      then
        local +r Line="$(green $RawLine)"
      else
        local +r Line="$(red $RawLine)"
      fi

      if [[ -n $TextMode ]]
      then
        # text="$text $Line $(blue \($FileNum\))\n"
        text="$text $Line \($FileNum\)\n"
      else
        print "$Line $(blue \($FileNum\))"
      fi

    else
      if [[ -n $TextMode ]]
      then
        text="$text $line\n"
      else
        print $line
      fi
    fi
  done

  if [[ -n $TextMode ]]
  then
    print $text
  fi
fi
end=$(date +'%s.%N')
print $(( end - start ))
